Java接口和抽象类
抽象类：
包含抽象方法的类称为抽象类，但并不意味着抽象类中只有抽象方法；
抽象类是为继承而存在的
1：抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法）；
2：抽象类不能用来创建对象；
3：如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为abstract类。

接口：
它是对行为的抽象，接口中可以含有变量和方法；
接口中的变量会被隐式地指定为public static final变量，而方法会被隐式地指定为public abstract；
接口中的所有方法不能有具体的实现，也就是说必须是抽象方法；

对于遵循某个接口的抽象类，可以不实现接口中的抽象方法。

两者差异：
1：抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract方法；
2：抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；
3：接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；
4：一个类只能继承一个抽象类，而一个类却可以实现多个接口。


Java的static关键字
用途：方便在没有创建对象的情况下来进行调用（方法/变量）
被static关键字修饰的方法或者变量不需要依赖于对象来进行访问，只要类被加载了，就可以通过类名去进行访问。


Java内部类
常规内部类，静态内部类，局部内部类，匿名内部类

常规内部类（没有用static修饰且定义在外部类类体中）：
常规内部类中的方法可以直接使用外部类的实例变量和实例方法
常规内部类中可以直接用内部类创建对象

静态内部类：
静态内部类与静态内部方法相似，只能访问外部类的static成员，不能直接访问外部类的实例变量与实例方法，只有通过对象引用才能访问

局部内部类：
在方法体或语句块（包括方法，构造方法，局部块或静态初始化块）内部定义的类
局部内部类不能加任何访问修饰符，因为它只对局部块有效，在定义的方法体外不能创建局部内部类的对象
方法中的内部类可以访问外部类成员，对于方法的参数和局部变量，必修有final修饰才可以访问

匿名内部类：
定义一个类的最终目的是创建一个类的实例，但是如果某个类的实例只是使用一次，则可以将类的定义与类的创建放到一起完成
或者说在定义类的同时就创建一个类
1：匿名内部类可以继承一个类或实现一个接口，但是不能同时实现一个接口和继承一个类，也不能实现多个接口
2：如果实现了一个接口，改类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字
3：由于匿名内部类没有名称，所以类体中不能定义构造方法，由于不知道类名也不能使用关键字来创建该类的实例。
TypeName obj=new Name（）{
   /*此处为类体*/
}






