排序算法分为内部排序和外部排序，这里我们主要讨论内部排序算法：
内部排序可以大致分为如下几种：
插入排序：直接插入排序，希尔排序
选择排序：简单选择排序，堆排序
交换排序：冒泡排序，快速排序
其余：归并排序，基数排序

其中稳定的排序算法有：直接插入排序；冒泡排序；归并排序；基数排序

快速排序：
快速排序比大部分排序算法都要快。尽管我们可以在某些特殊的情况下写出比快速排序快的算法，
但是就通常情况而言，没有比它更快的了。快速排序是递归的，对于内存非常有限的机器来说，它不是一个好的选择。

归并排序：
合并排序比堆排序稍微快一点，但是需要比堆排序多一倍的内存空间，因为它需要一个额外的数组。

堆排序：
堆排序适合于数据量非常大的场合（百万数据）。

Shell排序：
Shell排序比冒泡排序快5倍，比插入排序大致快2倍。Shell排序比起QuickSort，MergeSort，HeapSort慢很多。
但是它相对比较简单，它适合于数据量在5000以下并且速度并不是特别重要的场合。它对于数据量较小的数列重复排序是非常好的。

基数排序：
基数排序和通常的排序算法并不走同样的路线。它是一种比较新颖的算法，但是它只能用于整数的排序，
如果我们要把同样的办法运用到浮点数上，我们必须了解浮点数的存储格式，并通过特殊的方式将浮点数映射到整数上，
然后再映射回去，这是非常麻烦的事情，因此，它的使用同样也不多。而且，最重要的是，这样算法也需要较多的存储空间。

插入排序：
大部分已排序时较好

其他：
n小时较好